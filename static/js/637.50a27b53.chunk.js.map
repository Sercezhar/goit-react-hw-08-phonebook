{"version":3,"file":"static/js/637.50a27b53.chunk.js","mappings":"6KACA,MAA4B,mC,UCCrB,SAASA,EAAT,GAAwC,IAAbC,EAAY,EAAZA,SAChC,OAAO,gBAAKC,UAAWC,EAAhB,SAAmCF,M,uFCF5C,EAAuB,8BAAvB,EAA+D,iCAA/D,EAA0G,iC,UCInG,SAASG,IACd,IAAMC,GAAWC,EAAAA,EAAAA,MACXC,GAAoBC,EAAAA,EAAAA,KAAY,SAAAC,GAAK,OAAIA,EAAMC,KAAKH,qBAM1D,OACE,mBACEI,KAAK,SACLT,UAAWK,EAAoBJ,EAAiBA,EAChDS,QARJ,WACEP,GAASQ,EAAAA,EAAAA,OAIT,SAKGN,GACC,SAAC,MAAD,CAAWL,UAAWC,KAEtB,SAAC,MAAD,CAAcD,UAAWC,Q,0NCX3BW,EAAiBC,EAAAA,KAAaC,MAAM,CACxCC,MAAOF,EAAAA,KAAaE,QAAQC,SAAS,8BACrCC,SAAUJ,EAAAA,KAAaG,SAAS,iCAAiCE,IAAI,KAGxD,SAASC,IACtB,IAAMhB,GAAWC,EAAAA,EAAAA,MAEXC,GAAoBC,EAAAA,EAAAA,KAAY,SAAAC,GAAK,OAAIA,EAAMC,KAAKH,qBAE1D,GAKIe,EAAAA,EAAAA,IAAQ,CACVC,UAAUC,EAAAA,EAAAA,GAAYV,KALtBW,EADF,EACEA,SACAC,EAFF,EAEEA,aACAC,EAHF,EAGEA,MACaC,EAJf,EAIEC,UAAaD,OAKTE,EAAQ,mCAAG,WAAMC,GAAN,0FAEP1B,GAAS2B,EAAAA,EAAAA,IAAUD,IAFZ,sDAIbE,QAAQC,IAAR,MAJa,OAOfP,IAPe,wDAAH,sDAUd,OACE,SAAC,IAAD,WACE,SAAC,IAAD,CAASQ,IAAK,KAAMC,MAAO,SAA3B,UACE,kBACElC,UAAWmC,EAAAA,EAAAA,KACXP,SAAUJ,EAAaI,GACvBQ,aAAa,MAHf,WAKE,mBAAOpC,UAAWmC,EAAAA,EAAAA,MAAlB,WACE,kCACEnC,UAAWmC,EAAAA,EAAAA,OACPZ,EAAS,UAFf,IAGEd,KAAK,QACL4B,YAAY,WAEbX,EAAOX,QACN,cAAGf,UAAWmC,EAAAA,EAAAA,aAAd,SAAwCT,EAAOX,MAAMuB,cAIzD,mBAAOtC,UAAWmC,EAAAA,EAAAA,MAAlB,WACE,kCACEnC,UAAWuC,EAAAA,EAAAA,OACPhB,EAAS,aAFf,IAGEd,KAAMJ,EAAoB,OAAS,WACnCgC,YAAY,cAEbX,EAAOT,WACN,cAAGjB,UAAWmC,EAAAA,EAAAA,aAAd,SACGT,EAAOT,SAASqB,WAIrB,SAAC,IAAD,QAGF,mBAAQtC,UAAWmC,EAAAA,EAAAA,UAAsB1B,KAAK,SAA9C,6B,mBC3EV,KAAgB,MAAQ,4BAA4B,MAAQ","sources":["webpack://goit-react-hw-08-phonebook/./src/components/SectionsWrapper/SectionsWrapper.module.css?b8e8","components/SectionsWrapper/SectionsWrapper.jsx","webpack://goit-react-hw-08-phonebook/./src/components/ShowPasswordBtn/ShowPasswordBtn.module.css?e1bb","components/ShowPasswordBtn/ShowPasswordBtn.jsx","pages/LoginPage.jsx","webpack://goit-react-hw-08-phonebook/./src/pages/RegisterPage/RegisterPage.module.css?fdcb"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"Container\":\"SectionsWrapper_Container__dfvdv\"};","import styles from './SectionsWrapper.module.css';\n\nexport function SectionsWrapper({ children }) {\n  return <div className={styles.Container}>{children}</div>;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"Icon\":\"ShowPasswordBtn_Icon__Sk4K7\",\"ShowBtn\":\"ShowPasswordBtn_ShowBtn__X6CtE\",\"HideBtn\":\"ShowPasswordBtn_HideBtn__EBw9a\"};","import { useSelector, useDispatch } from 'react-redux';\nimport { togglePasswordVisibility } from 'redux/auth/authSlice';\nimport { RiEyeFill, RiEyeOffFill } from 'react-icons/ri';\nimport styles from './ShowPasswordBtn.module.css';\n\nexport function ShowPasswordBtn() {\n  const dispatch = useDispatch();\n  const isPasswordVisible = useSelector(state => state.auth.isPasswordVisible);\n\n  function handleTogglePasswordVisibility() {\n    dispatch(togglePasswordVisibility());\n  }\n\n  return (\n    <button\n      type=\"button\"\n      className={isPasswordVisible ? styles.HideBtn : styles.ShowBtn}\n      onClick={handleTogglePasswordVisibility}\n    >\n      {isPasswordVisible ? (\n        <RiEyeFill className={styles.Icon} />\n      ) : (\n        <RiEyeOffFill className={styles.Icon} />\n      )}\n    </button>\n  );\n}\n","import { useSelector, useDispatch } from 'react-redux';\nimport { logInUser } from 'redux/auth/authOperations';\nimport { useForm } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport * as yup from 'yup';\nimport { SectionsWrapper } from 'components/SectionsWrapper';\nimport { Section } from 'components/Section';\nimport { ShowPasswordBtn } from 'components/ShowPasswordBtn';\nimport formStyles from 'components/ContactForm/ContactForm.module.css';\nimport inputStyles from 'pages/RegisterPage/RegisterPage.module.css';\n\nconst registerSchema = yup.object().shape({\n  email: yup.string().email().required('Enter your email to log in'),\n  password: yup.string().required('Enter your password to log in').min(8),\n});\n\nexport default function LoginPage() {\n  const dispatch = useDispatch();\n\n  const isPasswordVisible = useSelector(state => state.auth.isPasswordVisible);\n\n  const {\n    register,\n    handleSubmit,\n    reset,\n    formState: { errors },\n  } = useForm({\n    resolver: yupResolver(registerSchema),\n  });\n\n  const onSubmit = async data => {\n    try {\n      await dispatch(logInUser(data));\n    } catch (error) {\n      console.log(error);\n    }\n\n    reset();\n  };\n\n  return (\n    <SectionsWrapper>\n      <Section tag={'h1'} title={'Log In'}>\n        <form\n          className={formStyles.Form}\n          onSubmit={handleSubmit(onSubmit)}\n          autoComplete=\"off\"\n        >\n          <label className={formStyles.Label}>\n            <input\n              className={formStyles.Input}\n              {...register('email')}\n              type=\"email\"\n              placeholder=\"email\"\n            />\n            {errors.email && (\n              <p className={formStyles.ErrorMessage}>{errors.email.message}</p>\n            )}\n          </label>\n\n          <label className={formStyles.Label}>\n            <input\n              className={inputStyles.Input}\n              {...register('password')}\n              type={isPasswordVisible ? 'text' : 'password'}\n              placeholder=\"password\"\n            />\n            {errors.password && (\n              <p className={formStyles.ErrorMessage}>\n                {errors.password.message}\n              </p>\n            )}\n\n            <ShowPasswordBtn />\n          </label>\n\n          <button className={formStyles.SubmitBtn} type=\"submit\">\n            Log In\n          </button>\n        </form>\n      </Section>\n    </SectionsWrapper>\n  );\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"Label\":\"RegisterPage_Label__plQHD\",\"Input\":\"RegisterPage_Input__oxpty\"};"],"names":["SectionsWrapper","children","className","styles","ShowPasswordBtn","dispatch","useDispatch","isPasswordVisible","useSelector","state","auth","type","onClick","togglePasswordVisibility","registerSchema","yup","shape","email","required","password","min","LoginPage","useForm","resolver","yupResolver","register","handleSubmit","reset","errors","formState","onSubmit","data","logInUser","console","log","tag","title","formStyles","autoComplete","placeholder","message","inputStyles"],"sourceRoot":""}